
= Amazon Elastic Container Service
キーワード：コンテナ/Docker
//embed[latex]{
\begin{tcolorbox}[title=どんなサービス？,sharp corners]
Amazon Elastic Container Service（以下 ECS）は、Docker コンテナを AWS で実行、スケーリングできます。
コンテナのクラスター管理やインフラ管理を運用、スケールする必要がなく
アプリケーション開発に集中できます。
\end{tcolorbox}
//}


//image[illust][][scale=0.95]{
//}

//embed[latex]{
\clearpage
//}


==[nonum] コンテナとは
インフラストラクチャーにおける新しい概念としてコンテナという概念が出ました。
EC2 等のサーバはサーバの設定やミドルウェア、スケールの設定を自信でセットアップしなければなりません。
それに対して、Lambda などのサーバレスアーキテクチャでは、ユーザ側はサーバの設定、ミドルウェアの設定、
スケールの設定をする必要が無い代わりに、実行環境が指定されていたりユーザ側の柔軟な設定ができないといった制約があります。
コンテナはこれら２つの中間に位置するアーキテクチャになります。

==[nonum] ECS のマネージドな部分
ECS では AWS 側が管理する部分として、コンテナが動くホストサーバ（EC2）の管理とプロビジョニングを AWS Fargate と
呼ばれる ECS の機能を使って管理できます。
これによってホストサーバのスケーリングや構築、設定などはユーザ側で行わなくても良くなります。
対して、アプリケーションのコードや実行環境、ミドルウェアの設定などはユーザ側の責任範囲で Docker を利用して
設定・構築することになります。
一般的に、Docker を利用することでコンテナの実行環境をソースコードで管理できます。
開発者でもアプリケーションの開発に集中しながらミドルウェアの設定なども変更できるので DevOps 組織に適した
インフラアーキテクチャとなっています。

==[nonum] メリット
一番のメリットは高負荷時に迅速に数千個のコンテナが起動できることです。
瞬時の負荷にも耐えられるシステムを構築できます。
また、一時的な負荷が落ち着いたときは自動でコンテナを停止し常に、最適なコンテナの数を
キープするのでコストパフォーマンスにも優れています。

==[nonum] ユースケース
もちろん一般的なアプリケーションで利用するユースケースもありますが、コンテナサービスならではのユースケースをご紹介します。

・イベントやメディア時の瞬時の高負荷に耐えるウェブアプリケーション

EC2 の AutoSaling ではできなかった瞬時の負荷に対する自動スケーリングを実現することができます。
AWS ECS Cluster Auto Scaling の機能を利用してホストサーバ（EC2）の自動スケーリングを管理します。

・数十万単位で並列稼働するバッチコンピューティングジョブ

バッチが終了したら自動でコンテナが停止されるため実行中の料金しか課金されないのがメリットです。

