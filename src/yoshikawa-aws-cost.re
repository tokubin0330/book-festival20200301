= AWSコスト再点検 〜コスト削減の隠し味〜

== はじめに

クラウドが取りざたされた当初はとにかく安く使えるということがしきりに喧伝されていましたが、
最近ではその幻想はぶち壊され、使ったら相応のコストがしっかり掛かってくることが認知されてきました。
AWSにはリザーブドインスタンスやTrusted Adviserなど、
コストを最適化する為の機能がいくつかあり、これらを適切に利用することで
コストを抑えつつサービスを利用することができるようになります。@<br>{}

本稿では、これらのコスト最適化機能のカバー範囲からはこぼれる
細かいコスト削減ポイント（＝隠し味）をご紹介していこうと思います。
コスト最適化機能に比べると地味・細かい・あたりまえのことばかりですが、
様々な会社やプロジェクトの現場で見てきたケースを元に
主にAWSを使い始めてまもなかったり、開発環境などのリザーブドインスタンスが購入しづらい環境で
発生しがちな無駄コストの削減ポイントを挙げていきます。@<br>{}

これらの点を改めて意識することで、AWS利用コストはきっともう一段下がりますので
ぜひご一読のうえ皆さんの環境でもチェックしてみてください。

== インスタンス利用料を削減する

=== EC2：使わないときは止める

お前はいきなり何を当たり前の事を言ってるんだ、という声が聞こえてきそうですが
これが当たり前なのに意外と出来ていないんです。
大事な事なのでもう一回言います。@<br>{}

@<b>{インスタンスを利用しないときはこまめに停止する事を徹底します。}@<br>{}

例えば、週末の間は利用しない開発用インスタンスの停止をきちんと行えば、
それだけで金曜18:00～月曜9:00の63時間分のコストが削減できます。
週末4回分で63*4=252時間。1ヶ月は24*30=720時間としたら実は@<b>{252/720=35%}も削れます。
毎日帰宅時にも停止できれば、削減率は73%にも及びます。@<br>{}

とはいえ、人間とは忘れる生き物です。
仮に忘れなかったとしても、週末なんて1秒でも早く帰りたいと思いますので、
いちいち停止作業なんてやってられません。@<br>{}

…よろしい、ならば自動化だ！@<br>{}

特定のインスタンスIDを持つEC2インスタンスを停止する関数をLambdaで作成し、
CloudWatch Event で決まった時間に実行…というのが一番シンプルで実装も容易です。
…が、それだけだと多数のインスタンスの管理が面倒になりがちなので、
Lambda関数に一手間加えて、特定のタグを持つインスタンスが対象になるようにします。
こうすれば、停止対象の管理でLambdaを触る必要がなくなる、
開発者自身がインスタンスにタグ付けするだけで自動停止の対象になるなど
運用の手間が大幅に削減されます。@<br>{}

@<list>{EC2AutoStop}はPythonでのシンプルな実装例で、
「ec2AutoStop」というタグを持つインスタンスを停止するスクリプトです。@<fn>{havekey}

//footnote[havekey][値は空白でもなんでも構いません。]

//list[EC2AutoStop][EC2自動停止スクリプト（Pythonでの実装例）]{
  import boto3

  def lambda_handler(event, context):
      ec2 = boto3.client('ec2')
      response = ec2.describe_instances(
          Filters=[
              {'Name': 'tag-key', 'Values': ['ec2AutoStop']},
              {'Name': 'instance-state-name', 'Values': ['running']}
          ]
      )

      instance_list = []

      for reservation in response['Reservations']:
          for instance in reservation['Instances']:
              instance_list.append(instance['InstanceId'])

      if len(instance_list) != 0:
          ec2.stop_instances(InstanceIds=instance_list)

      return instance_list
//}

これをLambdaの関数として登録し、CloudWatch Eventsから定期的に実行するようにしましょう。
私は金曜の22時に走らせることが多いです。
また、ほぼ同じ内容で決まった時間にインスタンスを起動することもできますので、
月曜8時ごろに起動するようにしておけば喜ばれるかもしれませんね。

=== RDS：停止機能を活用

リレーショナルデータベースのマネージドサービスであるRDSも利用頻度が高いサービスだと思います。
（ここ数年、そういえばMySQLやPostgreSQLのインストールなんてやってないな…）@<br>{}

一旦使わなくなったけどまた後で使いたいという場合、
以前はスナップショットを取得してインスタンスを削除、
必要になったらスナップショットから復旧するしかありませんでした。
オペレーションが面倒、エンドポイントが変わってしまうなど、正直こまめに停止というのは
（主に心理的な）ハードルが高かったように思います。
そんな中、2017年6月に停止機能がリリースされました。
下記のような制限があるものの、それ以前に比べてとても気軽にインスタンスを止められるようになり、
検証用・開発用にRDSを使いやすくなりました。

 * MSSQLのマルチAZインスタンスは停止できない
 * 停止から７日間たつと自動的に起動してくる

停止方法は@<img>{rds_stop1}のように、対象のインスタンスを選択して「アクション - 停止」を実行。
@<img>{rds_stop2}の確認画面が表示されるので「はい、今すぐ停止します」を実行するだけです。
こちらもEC2と同様、週末や大型連休の際に不要なインスタンスは停止するようにしましょう。

//image[rds_stop1][RDS停止方法][scale=1.0]{
//}

//image[rds_stop2][RDS停止確認画面][scale=0.8]{
//}

== 通信料を削る

サービスが成長してくると、AWS コストの半分以上が通信料、というケースが結構有ります。
通信料は事前の見積もりが難しく、管理・経営層からは
「なんでこんなにかかってるの…？」と言われやすい箇所でもあります。
対策は一つしかなくて、基本的には通信「量」の削減を地道に進めていくしかありません。
また、その「通信量を削る作業」はインフラの構成を工夫してどうにかなる問題ではなく、
アプリケーションに手を入れなければいけない事がほとんどで、
各アプリケーションの通信内容とそのサイズをログなどからチェックして、
容量の大きいものを削っていく、という事を地道にやるしかありません。@<br>{}

幸い、AWSでは通常インバウンドの通信には課金されず、アウトバウンドの通信にのみ費用がかかります。
一般的にアウトバウンドの通信が多いのはWebサーバーであり、
そのWebサーバーでは下記の対応が比較的難易度が低く効果が見込めるので、
まずはここを確実に対応しましょう。

 * 画像の軽量化
 * 画像サムネイルは元画像を縮小して表示するのではなく、サムネイル用の軽い画像を生成して利用する
 * JSやCSSのminify
 * Webサーバーの圧縮機能が有効になっている事を確認

新規にサービス・アプリケーションを作る場合は、通信量を意識して作れるとベストですが、
それにかける工数と効果が見合わない場合があります。
（サービス開始直後はそこまでコストにおける通信料の比率が高くないため）
なので、後で分析しやすいように通信量をきちんと記録することを最低限実装するようにします。@<br>{}

ApacheやnginxのログはELK@<fn>{ELK}などを用いて可視化すると、どのファイルが通信量を喰っているのか
非常に把握しやすくなるのでおすすめです。（非技術職の方に説明する際の資料としても有用です。）

//footnote[ELK][Elasticsearch＋Logstash＋Kibana]

//embed[latex]{
\clearpage
//}

====[column] 通信料に関するよくある誤解

よく誤解があるのですが、@<b>{CloudFront（CDN）経由の配信にしただけでは通信料金に関するコストは下がりません。}
配信した際にかかる通信料は、EC2に建てたサーバーから配信する場合と基本的には一緒です。
CDNにコンテンツをキャッシュすると嬉しいのは以下の点であることは周知の通りです。

 * ユーザー体験（レスポンスタイム）の向上
 * オリジンサーバーの負荷の低減

コスト削減という観点だと、オリジンの負荷を軽減してインスタンスの台数を減らしたり
スペックを下げることができて初めて「CDNがコストダウンに貢献した」と言えます。

====[/column]

== 価格が安いリージョンを利用する

//lead{
その環境、本当に東京に必要ですか？
//}

レスポンスタイムが厳密に求められなかったり、
他システムとの連携が必要ない開発・検証用途では、
東京リージョンではなく北米のリージョンを積極的に利用しましょう。
@<table>{pricetable}に示す通り、北米のリージョンは東京に比べて、おおよそ2～3割程安いことが多いです。

//table[pricetable][東京とオレゴンの価格比較]{
.	東京	オレゴン	価格比
EC2(AmazonLinux) t3.small	$0.0272／時	$0.0208／時	76%
RDS(MySQL) t3.small	$0.052／時	$0.034／時	65%
GB辺りの通信料	$0.114	$0.09	79%
//}

なお、気持ち程度の問題ですが、西海岸のオレゴンリージョンだと
東海岸であるバージニアより少しはレスポンスが良いかもしれません。
なお、AWS でリリースされたばかりのサービスは、
北米で利用できても東京リージョンではまだリリースされていない、と言う事がありますので、
そこは気を付けましょう。

== 未使用EBSを一掃する

主にEC2のストレージとして利用するEBSですが、
現行世代のボリュームである汎用SSD（gp2）だと、30GBで$3.6/月@<fn>{ebsprice}となります。
（東京リージョンの場合）@<br>{}

//footnote[ebsprice][1GB辺り$0.12/月]

利用するボリュームならコストがかかるのは当然ですが、
消し忘れたりして未使用で放置されているものについては無駄以外の何物でもありません。
ほかのリソースに比べて、EBS は消し忘れがよく発生するので無駄なコストが発生しやすいです。
インスタンス作成時に設定できる「あわせて削除」オプションを有効にすることを忘れずに行い@<fn>{delebstrue}
インスタンスを削除した際にそのインスタンスで利用していたEBSがゴミとして残らないようにしましょう。
インスタンス作成時にこれらのオプションを確認する事を習慣化すると、
EBSの放置が減る事につながっていきます。@<br>{}

//footnote[delebstrue][最近はデフォルトで有効になっていたはず…]

//image[ebs_with_delete][インスタンス作成時の「合わせて削除」オプション][scale=1.0]{
//}

EBSはスナップショットさえ取っておけば復旧は容易なので、
スナップショットを取ってどんどん削除していきましょう。

== S3 ライフサイクル機能を活用してストレージクラスを変更する

S3でのデータ保存は通常100GBで$2.5/月のコストが掛かります。
EBSに比べるとずっと安いのですが、S3はその性質上、
データをずっと貯めておくなどで利用することが多く、容量は右肩上がりに増えていきます。
そのため、サービス開始当初は大したことがなかった金額が、
いつの間にかすごい額に膨れ上がっている、と言う事がよくあります。@<br>{}

S3にはストレージクラスという概念があり、
例えばバックアップファイルなどのアクセス頻度が低いものは
「低頻度アクセスストレージ」というクラスに変更すれば
100GB・1ヶ月の料金が$1.9と約24%安くなります。@<br>{}

さらに、法令の都合で保管しているファイルなど、
本当に稀にしか読み出さないファイルについてはGlacierストレージクラスを活用しましょう。
以下の制限はあるものの、保管コストが100GB辺り$0.5となりスタンダードに比べて80%もお安くなります。

 * 読み出し時に事前申請が必要
 * 申請してから読み出せるようになるまで時間がかかる
 * 読み出し料金もかかる

いちいちストレージクラスを変更するのは面倒…ですが、
これらを自動化してくれるライフサイクル機能を利用すればOKです。
@<img>{s3_lifecycle1}および@<img>{s3_lifecycle2}で示すように
ライフサイクル機能でS3に保管後一定の期間が経過したオブジェクトの
ストレージクラス変更や削除を自動化するようにしましょう。

//image[s3_lifecycle1][ライフサイクル機能の設定画面1][scale=1.0]{
//}

//image[s3_lifecycle2][ライフサイクル機能の設定画面2][scale=0.7]{
//}

なお、CloudWatchのメトリクスで、バケット別・ストレージタイプ別の利用量が確認できます。
このメトリクスは非常に有用ですので、ぜひ確認のうえライフサイクルの設計に役立ててください。@<br>{}

また、つい先日2018年11月にS3 Intelligent-Tieringという、
オブジェクトのアクセス頻度をモニタリングして、
AWSが自動でストレージクラスを変更してくれる機能もリリースされました。@<fn>{s3it}
これも積極的に取り入れればもっと簡単にコストが最適化できそうです。@<br>{}

//footnote[s3it][https://aws.amazon.com/jp/blogs/news/new-automatic-cost-optimization-for-amazon-s3-via-intelligent-tiering/]

永年保管すべきデータや高頻度なアクセスがずっと必要になるファイルというのは
意外と少ないと思いますので、これらの機能を使って S3 もきちんと整理しておくと、
コストの増加が抑えられます。

== まとめ

内容的には「あたりまえ」のことだらけですが、このように細かいところをチェックすると
結構削減できるところが有った事に気付けます。
ぜひ皆さんがお使いのアカウントでも一度チェックして頂き、
コストが削減出来たらその浮いた分で別のリソースを使ったり、
焼肉食べに行くなどして有効活用してください！
