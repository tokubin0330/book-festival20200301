= AWSセキュリティ入門

== はじめに
クラウドサービスの導入においてセキュリティ方針は導入時の検討項目になることが多いと思います。
特にクラウドサービスを利用する場合、ミニマムスタートで開発をスタートさせるプロダクトがあるかと思います。
その際に、どうしてもセキュリティ対策の検討を後回しにしがちになるかと思います。
本章では、 後回しにしないためのクラウド時代の新しいセキュリティ設計方針としてセキュリティオートメーションについて解説していきます。

== AWSのセキュリティ方針について

=== AWS責任共有モデル

AWSのセキュリティーを説明するうえでとても重要な考え方に「責任共有モデル」があります。
「責任共有モデル」では、AWSとユーザーが果たす責任を明確にし、それぞれがきちんと責任を果たさなければいけません。
この責任共有モデルでとても重要なことは、AWSがすべての責任を負ってはくれないということです。
AWSと自分たちはどこまでの責任を負わなければいけないのか簡単に整理します。@<br>{}

AWS側が責任を果たす範囲

 * 設備
 * 物理的セキュリティー
 * 物理的インフラストラクチャー
 * ネットワークインフラストラクチャー
 * 仮想化インフラストラクチャー

ユーザーが責任を果たす範囲

 * オペレーティングシステム
 * アプリケーション
 * セキュリティーグループ
 * OSファイアーウォール
 * ネットワーク構成
 * アカウント管理

AWS内のデータ・アプリケーションやオペレーティングシステムのセキュリティー保護は、ユーザー側の責任です。
AWSが良しなににやってくれるからセキュリティーについてはお任せで！というのは幻想です。
AWSを利用するとセキュリティー強度が自動的に堅牢になるのではなく、自分たちで運用をして堅牢になっていくんです。
というわけで、自分たちのことは自分たちで守らなければいけないことはオンプレだろうとクラウドだろうと変わりません。
以降では、どのようにセキュリティー強度を上げていくかを「防ぐ・保護する・検知する・記録する」の観点からAWSに準備されているサービスを説明をしていきます。

== クラウド時代のセキュリティ設計
=== セキュリティオートメーションの考え方
クラウドサービスでのセキュリティ設計ではオンプレミスの時とは全く違う考え方で設計を行います。
オンプレミス時代ではセキュリティ業務として、スプレッドシートでのセキュリティ要件の管理や、セキュリティポリシーの文書化
など文書主体でセキュリティ業務を行うことが多いかと思います。
また、サービス環境がセキュリティポリシーを満たしているかどうかはチェックリストを用いて人間が手作業でサーバ環境をチェックしていました。


クラウド時代では、これらのセキュリティ業務を自動的にかつ、サーバレスに行えるように設計をします。
セキュリティの自動的化（セキュリティーオートメーション）を行うことで次のメリットが得られます。
 
 * 拡張性
//quote{
クラウドサービスの特徴としてスケーラブルなアーキテクチャを設計できる点があります。
スケーラブルに拡張されるインフラストラクチャに対してセキュリティも一緒に自動で拡張ができます。
//}

 * コスト削減
//quote{
人間が作業してきたセキュリティポリシーの文書化やチェックリストの確認作業にかかる労力を削減できます。
また、ワンクリックで作成できるリソースや自動で拡張されるリソースに対して、自動でセキュリティの評価を随時行うことで膨大な人的コストの削減に貢献することができます。
//}

 * 信頼性
//quote{
セキュリティの設定を人間の作業が介在しないことによって人為的なミスが排除されサービスの品質が上がります。
//}

このように、クラウドサービスではオンプレミスとは違うセキュリティ設計を考えなければなりません。
次に、セキュリティオートメーション設計の最小パターンを見ていきましょう。

=== セキュリティオートメーションの最小パターン
AWS においてのセキュリティの自動化を行うためのパターンを見ていきます。
自動化を行うための最小限のパターンとして「入力」、「評価」、「実行」といった要素で構成することができます（@<img>{patern}）。

//image[patern][セキュリティーオートメーションの最小パターン][scale=0.70]{
//}

入力は、構成変更やDDos攻撃、不正通信、脆弱性の発見などセキュリティに関する何かしらの変化をログ等から得ることができます。
評価は、入力で起きた変化に対して問題があるのかないのかを判断する部分になります。不正通信であれば、IPアドレスをチェックしたりします。
実行は、最終的にセキュリティの脅威に対してどういった処置を実行するかを決める部分になります。不正通信であれば、IPアドレスをブロックしたり脆弱性が見つかった場合はセキュリティパッチを当てるといったことを行います。


セキュリティオートメーションでは評価の部分で利用される Lambda が重要になってきます。
なぜなら、セキュリティの脅威を予測することは不可能かつ、対処方法だけはわかるといった状況にこのサーバレスの Lambda がマッチしているからです。
セキュリティエンジニアはこの Lambda で実行されるセキュリティの脅威からの処置をコードで実装することになります。


本章では、いくつかケースごとのセキュリティ対策をセキュリティオートメーションの観点から設計された例をご紹介致します。


== AWS アカウントを守る

セキュリティ対策と聞くと、一般的にはサーバ内のセキュリティ対策をイメージされる方が多いと思います。
AWS などのクラウドサービスを利用する場合は、AWS が提供しているマネジメントコンソール内のリソースに対してのセキュリティ対策も考慮する必要があります。
マネジメントコンソールでは、AWS が提供している様々なサービスをグラフィカルに操作することができます。
AWS のアカウントを作成後は認証情報としてユーザ ID とパスワードを利用して AWS のリソースを操作するため、もし認証情報が漏洩するとアカウント内のリソースを無制限に操作されてしまうリスクがあります。
もし、アカウントの認証情報の漏洩等によってアカウント内のリソースを第三者から操作されてしまうと、情報漏洩や AWS サービスの無断利用による多額の請求などが起こる場合があります。

では、アカウント内の AWS リソースを保護するにはどうするべきでしょうか。
ルートユーザの保護や適切な IAM ユーザの作成、他要素認証など基礎的なアカウント保護方法について次の公式ページに任せて、少し発展的なアカウント保護の方法について解説します。

@<href>{https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_root-user.html}

=== AWS CloudTrail の導入

アカウント内の AWS リソースに対しての操作をロギングするサービスに「AWS CloudTrail」があります。
CloudTrail はアカウント内のリソースに対してアクティビティログを記録し、監視、保持するサービスです。
AWS はリソースの操作を裏側ではすべて API で行っています。
したがって、AWS マネジメントコンソール、AWS の SDK やコマンドラインツール、その他の AWS のサービスを使用して実行されるアクションなどリソースに対する操作は API のイベント履歴として記録できるようになっています。
CloudTrail はこの API イベントをロギングし、セキュリティ分析やリソースの変更追跡、トラブルシューティングなどを簡単にできるようになります。

ここでは CoudTrail を利用したセキュリティ対策のユースケースとして次のケースをご紹介します。

==== AWS アカウントのログインユーザ監視

CloudTrail と Lambda を利用して AWS アカウントにログインしたユーザをシステム管理者に通知することができます。
システムにログインしたユーザを記録しなければならないといったセキュリティポリシーがある場合は、これを利用してログインユーザの通知と記録を行うことができます。
次が、AWS マネジメントコンソールにログインしたユーザの記録と通知を自動で行うセキュリティオートメーションの例です（@<img>{login}）。

//image[login][CloudTrail を利用したログインユーザの記録と通知][scale=0.90]{
//}

AWS マネジメントコンソールにログインした情報は CloudTrail を通して S3 や CloudWatch Logs に転送されます。
証跡情報と呼ばれるログイン情報の記録はデフォルトでは 90日間しか参照できません。
証跡情報を S3 バケットへ転送することによってS3 で設定された任意のローテーションの期間だけ保管することができます。
また、CloudTrail は自動で CloudWatch Logs にも認証ログを転送します。
CloudWatch Logs のフィルタ機能を利用してフィルタに一致したイベントを Lambda イベントの発火起因とし、SNS トピックを通して管理者へログインしたアカウントや日時、ユーザ名を通知することができます。


このように CloudTrail はイベントログに対してフィルタを掛けて Lambda や CloudWatch Logs と連携させることで更に別のイベントを発火させることができるので
セキュリティオートメーションとして応用性の高いサービスとなっています。

== セキュリティポリシーの侵害を防ぐ
企業ではインフラストラクチャを構築する際にセキュリティポリシーを持っているかと思います。
例えば、インストールしてはいけないミドルウェアやサポートが切れたミドルウェアバージョンの一覧などです。
このポリシーを開発者全員に周知、徹底、順守させるのは不可能なので、自動でセキュリティポリシー侵害を検知する仕組みを導入します。

=== AWS Config を利用したEC2インスタンス内の企業ポリシー侵害の検知

AWS Config は AWS リソース情報の変更を継続的に監視、記録します。
Config を利用することで、AWS リソース、AWS リソースの設定、EC2 インスタンス内のソフトウェア設定を任意の時点で確認することができます。
また、以前の状態からの設定の変更を検出すると SNS トピックなどを通して通知及びアクションを実行することができます。

次の例では、AWS Config を利用した許可されていないミドルウェアのインストールを検知するセキュリティオートメーションになります（@<img>{config}）。

//image[config][AWS Config を利用した許可されていないミドルウェアのインストール検知][scale=0.90]{
//}

AWS Systems Manager の Inventory を利用して EC2 インスタンス内のパッケージ一覧情報を取得します。
Inventory は SSM エージェントから送信される EC2 インスタンスの情報を収集します。
AWS Config は Inventory で収集されたパッケージ一覧に変更がないかを監視します。
Config Rule には企業のセキュリティポリシーとしてインストールしてはいけないミドルウェアの一覧などをルール化しておきます。
変更があると Config は Config Rule を評価し、ポリシー違反を検知すると SNS トピックスにその情報を送信します。
最終的に SNS がメールなどの通知サービスを利用してシステム管理者のポリシー違反の情報を通知します。


====[column] AWS Config と AWS CloudTrail の違い
AWS Config と AWS CloudTrail はどちらもリソースの監視と記録をするサービスです。
では、この２つのサービスと利用シーンの違いは何でしょうか。

Config は ポリシー違反しているリソースの設定情報を監視して報告するだけのサービスです。
攻撃者が短期間に多数の変更を加えた場合詳細な変更を追うことはできません。
リソースに対する最新かつ重要な変更のみを保存し、細かい頻繁な変更は無視します。
また、Config は IAM と統合してユーザがリソース内でできることできないことに対して制限をかけることができます。
更に、CloudFormation と連携して、セキュリティ管理者が承認済みの AWS リソーステンプレートを作成し開発者と共有することで管理者の承認を得ずに開発者のみでリソースを作成する事もできます。
また、ポリシーに違反したテンプレートの変更は即座に通知することもできます。
それは、開発のスピードアップをはかり、組織全体で一貫したセキュリティポリシーを適応することで一定の品質を保証することに繋がります。

一方、CloudTrail は AWS リソースの変更を起こすイベント、すなわち API イベントにのみに焦点を当ててます。
ログの流れの中のあらゆる変更を追跡することができます。
攻撃者がいつどのようなリソースを変更したかを調査することができます。
CloudWatch Events と統合しているため、リソースで発生した全てのイベントに対して自動アクションを起こすことができます。
Config と CloudFormation が連携されたテンプレートの変更監視に CloudTrail を利用することで、いつどこで誰が変更を行ったのかを詳細に探すこともできます。

これら２つはセキュリティ要件と規制要件をより適切に満たし、より迅速にトラブルシューティングする場合にはとても強力なサービスになります。

====[/column]

== 感染を防ぐ
=== EC2 インスタンスへの SSH アクセス制限
クラウドネイティブなプロダクトではないサービスや、オンプレミスからクラウドサービスへ移行されたプロジェクトなどでは、EC2 インスタンスを利用しているケースがあるかと思います。
EC2 インスタンスを利用する場合は、サーバレスサービスとは違い常につきまとうセキュリティ上の懸念点として SSH からの不正アクセスがあります。 
EC2 インスタンスを不正アクセスから守るためにはどうするべきでしょうか。次の 2 つの設計が考えられます。

 * SSH アクセスをセキュリティグループで制限をかける
 * そのそも SSH アクセスをさせない

==== SSH アクセスをセキュリティグループで制限をかける
１つ目は 簡単にできる対策ですね。
EC2 インスタンスにアタッチされているセキュリティグループの SSH プロトコルの許可 IP を信頼された IP しか許可しないようにします。
AWS では EC2 インスタンスで Web アプリケーションサービスを本番運用する場合の一般的なセキュアな構成を次のように推奨しています（@<img>{fumidai}）。

//image[fumidai][踏み台サーバを経由した Web サーバへのアクセス][scale=0.80]{
//}

プライベートサブネットに作成された Web サーバはグローバル IP アドレスを付与していないので基本的にはグローバルからの SSH アクセスはできません。
また、インターネットから Web サーバにアクセスされる 80、443 からのアクセスは ALB を経由してアクセスされるので、Web サーバ自体もグローバルにさらさないように構成します。
このような構成の場合は SSH アクセスはパブリックサブネットに踏み台サーバを立ててからアクセスするようにします。
踏み台サーバには固定 IP アドレスを付与し Web サーバにアクセスするときのみ起動させます。
もちろん踏み台サーバのセキュリティグループには運用元の企業 IP のみ許可させます。
Web サーバのセキュリティグループには踏み台サーバの IP アドレスのみ許可します。
この基本構成をクラウドで構築すれば Web サーバの SSH アクセスを保護することができます。

==== そのそも SSH アクセスをさせない
２つ目は、そもそも SSH のアクセスを禁止することができれば、不正アクセスの脅威大幅に軽減されます。
しかし、完全に SSH デーモンを停止させるとサーバの中にはアクセスすることができなくなってしまいます。
サーバへログインしてコマンドを叩ける EC2 インスタンスの汎用性の良さが失われてしまうのは少し微妙です。


そのような、EC2 インスタンスへログインして操作したいユーザ向けに SSH を使わずセキュアなコネクションを確立しコマンドを叩くことができるサービス（AWS Systems Manager RunCommand）を提供しています。


RunCommand は EC2 インスタンスに対してリモートでコマンドを実行できるサービスです。
サーバ内の任意のコマンドをあたかも SSH でアクセスしているかのように AWS コンソール画面から実行することができます。
SSH ポートを開ける必要がなく EC2 インスタンスに常駐している SSM エージェントと RunCommand が連携してサーバ内のコマンドを実行してくれます。
サーバ内には SSM エージェントを常駐しておく必要があります。
Amazon Linux インスタンスにはデフォルトで常駐しているプロセスなのでインストールの必要はありません。


このように RunCommand を利用することで SSH を利用せずにセキュアにかつ複数端末に対して一斉に任意のコマンドを送信することができます。

2 点 EC2 環境での不正アクセス対策をご紹介しました。
最近のモダンなクラウドネイティブサービスではそもそも本番サーバに SSH でアクセスできてしまうこと自体がナンセンスな風潮があります。
SSH アクセスができないサービスを利用することで不正アクセスを防ぐ他に、アップデート作業の際の人為的なコマンド操作ミスなどの懸念点をなくすなどのメリットがあります。
SSH アクセスができないサービスの例として EKS、ECS、Fargate などのコンテナ型仮想化サービスがあります。
ここでは紹介しませんが、最近のエンタープライズ向けサービスではこのコンテナ型仮想化サービスを基盤にインフラアーキテクチャを組むことがデファクトスタンダードになりつつあるのでぜひ抑えておいてほしい技術です。


=== Amazon GuardDuty を利用したマルウェア感染検知と被害拡大の抑止
この世にセキュリティ対策が完璧なサービスはなくアプリケーションのバグやゼロデイ攻撃によってマルウェアに感染する時は感染します。
その場合は、感染した後の処置とこれ以上の感染被害拡大を防ぐことを考えます。
それらに適したサービスとして Amazon GuradDuty があります。
Amazon GuardDuty は、悪意のある操作や不正な動作を継続的にモニタリングする脅威検出サービスです。
このサービスの特徴として、機械学習を利用して脅威の検出、異常検出を行います。
例えば普段から AWS を利用している場所（IP アドレス）以外からのアクセスに対してログインが試みられたことを検知したり攻撃の疑いのある VPC フローログを検知するといったことができます。
機械学習は AWS 側で自動で脅威の学習を行うのでユーザ側では特に何もする必要はありません。
ユーザは Amazon GuardDuty の利用を開始するだけで自動で CloudTrail、DNS ログ、Amazon VPC フローログ、など複数の AWS リソースのログとイベントを分析します。

次の例では、Amazon GuardDuty を用いたマルウェア検知と除去のセキュリティーオートメーションになります（@<img>{guardduty1}）。

//image[guardduty1][GuradDuty を利用したマルウェアの検知と除去][scale=0.90]{
//}

ここでは、GuardDuty が分析した VPC フローログなどから不正な C&C サーバ@<fn>{candc}との通信をインテリジェンスに検知しています。
GuardDuty は CloudWatch Events と統合されているため検知した結果をそのまま次のイベントとして実行することができます。
ここでは Systems Manager の RunCommand で、ウィルススキャンを実行しウィルスを発見次第除去または隔離を行います。

//footnote[candc][C&C サーバ: マルウェアに感染したサーバに対して遠隔から不正コマンドを送信するために利用されるサーバ]

更に感染の拡大を防ぐために複数アカウントの WAF に対してマルウェアの送りつけ元の IP アドレスをブロックしているのが次の例です。

//image[guardduty2][Firewall Manager を利用したマルウェア感染拡大の防止][scale=0.90]{
//}

AWS Firewall Manager は 複数アカウントの WAF の設定を一元管理するためのサービスです。
Firewall Manager と Lambda を連携させて、C&Cサーバの IP アドレスを割り出し、WAF の IP ブロックリストを自動で更新するといったこともできます。

== 脆弱性を防ぐ
=== Amazon Inspector による脆弱性の検知とセキュリティパッチの自動化
Amazon Inspector は自動的にアプリケーションを評価します。
EC2 インスタンス上の脆弱性をチェックしたりベストプラクティスからの逸脱がないかをチェックすることができます。
また、事前に定義したルールパッケージを使用することができます。
このルールパッケージは一般的なセキュリティのベストプラクティスと脆弱性が組み込みルールとして定義されています。
これらの組み込みルールは AWS のセキュリティ調査担当者がが定期的に更新を行ってくれます。

組み込みルールの一例として、インターネットから EC2 インスタンスにアクセス可能になっていないかどうか、
リモートルートログインが有効になっていないかどうか、
脆弱なソフトウェアがインストールされていないかどうかをチェックすることができます。
脆弱なソフトウェアに関しては共通脆弱性識別子 (CVE) を Inspector が表示してくれます。

次の例では Inspector で検知された脆弱性に対して自動でセキュリティパッチを当てるセキュリティオートメーションの例です（@<img>{inspector}）。

//image[inspector][Inspector と RunCommand を用いたセキュリティパッチの自動化][scale=0.90]{
//}

EC2 インスタンス上の脆弱性を Amazon Inspector が EC2 にインストールされている Amazon Inspector Agant から定期的に送信されるデータを収集します。
Amazon Inspector Agant は EC2 インスタンスのネットワーク、ファイルシステム、プロセスアクティビティなどをモニタリングします。

Inspector は評価テンプレートをもとに、ルールパッケージの脆弱性などを診断します。
結果は SNS トピックとして送信されます。
自動化ワークフローとして、SNS トピックを経由して、脆弱性のインスタンスIDを AWS Systems Manager の RunCommand に渡します。
RunCommand は指定されたインスタンス ID に対して脆弱性を修正するようなコマンドを実行します。
ここでは PHP のセキュリティパッチを適応するために yum コマンドを叩いている例です。


この例では SNS トピックから直接 RunCommand を呼び出しましたが、脆弱性に対する修正を判断するためにもう少し複雑なロジックが必要になるかもしれません。
その場合は評価の部分を Lambda で実装することで複雑な脆弱性対応のロジックに対応することもできます。


== 攻撃を防ぐ
=== AWS WAF を利用した不正通信のブロック
CloudWatch Events を利用して Lambda を定期的に実行し、WAFのルールを自動更新するといったセキュリティーオートメーションの例です（@<img>{waf}）。

//image[waf][Lambda と WAF を利用した不正通信のブロック][scale=0.90]{
//}

CloudFrontや Application Load Balancer に付与されている WAF のルールを Lambda で定期的に更新します。
更新する内容は、サードパーティが提供している不正通信の疑いがある IP アドレスのブラックリストです。
Lambda が定期的に IP ブラックリストをダウンロードし、自動で WAF を更新します。

== 漏洩を防ぐ
=== Amazon Macie による機密情報の検知と S3 バケットの保護

Amazon Macie はオブジェクトの機密情報を検知するサービスです。
機械学習によって AWS 内の機密データを自動的に検知、分類、保護することができます。
例えば、S3 から大量のデータをダウンロードされている、個人情報を含んだデータが保存されている、ソースコード内部の API キーのアップロードの検知、機密データが外部アクセス可能になっているといったことをインテリジェンスに検知することができます。
裏側では自然言語処理の機械学習を利用しているため、2019年 4月現在では 英語のみの対応となっています。


次の例は、Amazon Macie を利用した機密情報の検知と S3 バケットの保護をするセキュリティオートメーションの例です（@<img>{macie}）。

//image[macie][Amazon Macie を利用した機密情報の検知と S3 バケットの保護][scale=0.90]{
//}

ユーザが誤って S3 に機密情報を含むオブジェクトをアップロードしてしまいました。
Macie は常に指定された AWS リソースをスキャンし、機械学習を利用し機密情報が含まれているかを検知します。
Macie はすべての結果を CloudWatch Events に送信します。
Lambda が CloudWatch Events をトリガーに S3 バケットの読み取り、書き込み権限を剥奪したり、または自動で機密データを暗号化させる事もできます。

== 未然に防ぐ開発時に約立つセキュリティ対策
=== シークレットキーの漏洩を防ぐ
開発者も AWS リソースを侵害するようなコードを書かないようにセキュリティに注意して開発を行わなければなりません。
よく起こる開発時のセキュリティインシデントの例にシークレットキーとアクセスキーの漏洩があります。
シークレットキーとアクセスキーを GitHub 等の公開レポジトリにアップロードしてしまい、AWS リソースを無許可で第三者が作成するといったことがよく起こっています。
悪意のあるユーザが GitHub の公開レポジトリに対してスキャンをかけ、シークレットキーとアクセスキーを盗み出そうとするボットを動かしています。
AWS もこの事象を重く受け止め AWS 側でも GitHub の公開レポジトリを定期的にスキャンしキーがアップロードされていないかを監視しています。
しかし、キーをアップロードしてから悪意のあるユーザが盗み取るまでの時間のほうが早く AWS 側の対策も完璧ではありません。
間違ってアップロードしないように、開発者側で漏洩を防ぐ対応をしなければなりません。

そこで AWS はキーを commit しないように監視するスクリプトを公開しています。

git-secrets: @<href>{https://github.com/awslabs/git-secrets}

この git-secrets のセットアップはレポジトリごとに設定を行います。

//cmd{
$ cd <git レポジトリ>
$ git secrets --install
$ git secrets --register-aws
//}

ローカルレポジトリ内に AWS シークレットキーまたはアクセスキーの文字列がある場合、コミットしようとすると下記のようにコミットできないようにエラーを出してくれます。
//cmd{

[ERROR] Matched one or more prohibited patterns

Possible mitigations:
....
//}

レポジトリごとに設定をしないといけないですが、万が一に備えてプロジェクト導入時のローカル開発環境の構築手順書や README などにこの「git-secrets」の導入手順を入れておくことをおすすめします。

== AWSのベストプラクティスに沿った提案をしてくれるAWS Trusted Advisorを活用する

AWS Trusted Advisorは、少し特殊なサービスで「防ぐ・保護する・検知する・記録する」ではなく、アドバイスをしてくれるサービスです。
特に設定をする必要はなく、初期状態で機能しています。
AWS Trusted AdvisorはユーザーのAWS環境を分析し、推奨ベストプラクティスを次の5つのカテゴリで提供してくれます。
あくまで提案となっており、やるやらないは自分達次第です。

 * コストの最適化
 * パフォーマンス
 * セキュリティ
 * 耐障害性
 * サービスの制限

重要なことは、1度確認して終わるのではなく継続的に改善していく事が大事です。
知らないうちにS3のバケットがパブリックになっていたとか、利用していないIAMユーザーの棚卸など継続して確認していかなければならないことはたくさんあります。
全てをリスト化する事は大変ですが、AWS Trusted Advisorなら初めからリスト化さているし更新も行ってくれます。利用しない手はありません。


== まとめ
クラウド時代ではセキュリティの設計はオンプレ時代の設計と同じようにしていては、スケーラブルに変わるシステムや開発フローについていけなくなってしまいます。
また、セキュリティリソースの投入タイミングは IT リソースの投入タイミングと同時である必要があります。
なぜなら、IT リソースの投入だけでたまたまセキュリティインシデントが起こらなかった場合に、
なぜあとからセキュリティリソースを投入しなければならないのといった声が出てしまうからです。
オンプレ時代は IT リソースの調達は半年に一回や数年に一回といった頻度で運用してきました。
同じようにセキュリティの見直しもその調達に合わせてアップデートしてきました。

しかしクラウド時代はそのようにはいきません。
スケーラブルにかつ予測不可能に調達されるクラウドリソースに対して、セキュリティ対策のすべてを人間の手作業でやっていては追いつきません。
セキュリティエンジニアは、セキュリティオートメーションの設計とセキュリティインシデントに対する対応方法をコード化することに専念し、セキュリティインシデントに対する検知、分析、処置はなるべく自動で行うべきです。
そうすれば、企業内で統一された一定の品質のセキュリティが担保された状態を維持することができます。

クラウドだからこそできるセキュリティオートメーションを是非これらの参考事例とともに試してみてください。
