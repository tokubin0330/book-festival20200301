= AWS認定ソリューションアーキテクト - アソシエイト 対策編

AWS認定ソリューションアーキテクト - アソシエイト(以降、AWS認定SA)では、以下の通りの事をAWSを利用して対応できるかを問われます。

 * 顧客の要件に基づき、アーキテクチャ設計原則に沿ってソリューションを定義できること
 * プロジェクトのライフサイクルを通して、ベストプラクティスに基づく実装ガイダンスを組織に提供できること

また、推奨されるAWSの知識として、下記が挙げられています。

 * 分野1:AWS上で可用性、優れたコスト効率、耐障害性を備え、スケーラブルな分散システムを設計した1年間の実務経験
 * 分野2:AWSのコンピューティング、ネットワーキング、ストレージ、データベースサービスの実践的な使用経験
 * 分野3:AWSのデプロイおよび管理サービスに関する実践経験
 * 分野4:AWSベースのアプリケーションに関する技術的要件を特定、定義する能力提示された技術的要件を満たすAWSのサービスを特定する能力
 * 分野5:AWSプラットフォームで安全性と信頼性の高いアプリケーションを構築するために推奨されるベストプラクティスに関する知識
 * 分野6:AWSクラウドでのソリューション構築における基本的なアーキテクチャの原則に関する理解
 * 分野7:AWSのグローバルインフラストラクチャに関する理解
 * 分野8:AWSに関連するネットワーク技術の理解
 * 分野9:AWSで利用できるセキュリティ関連の機能およびツールと従来型サービスとの連携に関する理解
 
 @<href>{https://aws.amazon.com/jp/certification/certified-solutions-architect-associate/}
 @<br>{}

つまり、「EC2を立てて、ついでにELB（Load Balancer）を設置してみた」とか、「S3にファイルをアップロードして、Webからアクセスできるようにした」だけでは、到底合格することはできません。
AWSを全体的に理解し、それを利用して設計・構築ができるようになって合格ラインに立つことができます。
対策編では、推奨されているAWSの知識の分野1を解説します。
この記事で少しでも知識の整理に役立てればと思っています。

== AWS上で可用性、優れたコスト効率、耐障害性を備え、スケーラブルな分散システムの設計

AWSでの設計思想に「@<b>{design for failure}」というものがあります。
@<br>{}

これは、簡単に言うと「@<b>{システムは障害が発生するものである。したがって障害を見据えた設計をしよう}」という考え方です。
EC2は突然と落ちるという前提で、AZがまるごと消滅してしまう。ということも考えながら設計していくことが大事です。
実際、EC2はカジュアルにAWS側で再起動が行われています。ここでは、障害に強い設計の考え方とコストについて整理します。

== 可用性

可用性とは、システムが継続して稼働できる能力のことであり、可用性が高いことを@<b>{高可用性}と表します。
つまり、システムなどにおいてサービス提供が出来なくなる事態の発生頻度が少ないことを示します。重要なことは、落ちないことを目指していないところです。
世の中的には、絶対落ちないシステム設計やどんなに負荷がかかっても安定したパフォーマンスを求められたりします。
それはとても大変なことです。であるならば、なるべくシステムを落とさないことを目指し、仮にシステムに障害が発生したり、パフォーマンスが悪くなったとしてもシステムとしてすぐにリカバリーできればいいんじゃないかという考え方です。
では、どのような設計が高可用性となるのか説明します。
@<br>{}

まずは、シンプルにEC2を立てただけの構成です。

//image[just-ec2][EC2を立てただけ]{
//}

この構成ではEC2に障害が発生すると即座にサービスが停止されてしまいます。つまりまったく可用性のないシステムです。
ちなみにEC2のSLAは99.99%となっており、これは年間で約52分間稼働できなくても保証されないということになります。
月間で計算すると約4分です。これが困るかどうかは作っているサービス次第になりますが、現実の問題として止まるということです。

//embed[latex]{
\clearpage
//}

次は、可用性を高めるために複数台構成にしてみます。

//image[two-ec2][ELBを設置し複数台構成にした]{
//}

EC2の前にELBを設置し、複数台構成にしました。
このように複数台構成にすれば、どちらか1台に障害が起きたとしてもサービスを稼働し続けることができます。
「1台に障害が発生している間にもう1台も障害が発生する。」こんなシチュエーションは、なかなかなさそうです。
これで、可用性がぐっと上がりました。
でもまだ、安心できません。よく見てみると、この2台は同じAZの中にいます。
ということは、AZが機能しなくなるような障害が発生した瞬間このサービスは停止します。
原因は大地震とかハリケーンでしょうか？はたまた中の人によるオペレーションミスなのか・・・。考えると不安になってきます。

//embed[latex]{
\clearpage
//}

次は、可用性をさらに高めるためMulti-AZ構成にしてみます。

//image[Multi-AZ-ec2][Multi-AZ構成にした]{
//}

複数台構成のEC2を複数のAZに配置することにより、AZで障害が発生しても別のAZで稼働しているEC2によりサービスを稼働し続けることができるようになりました。
このように、ここで障害が発生したらどうなる？という疑問を常に意識して設計していく事により、
可用性の高い、高可用性の設計をすることができるようになります。
さらに、ではリージョンで障害が発生したら？とか考えていくと、どんどん理解が深まります。

//embed[latex]{
\clearpage
//}

====[column] 高可用性を実現するための考え方

 * 複数のAZおよびリージョンを使用する。
 * Auto Scalingを使用する。
 * 以下のような高可用性を実現するAWSサービスを利用する。
 ** Amazon RDS
 ** Amazon DynamoDB
 ** Amazon S3
 ** Amazon SQS
 ** Elastic Load Balancing

====[/column]

== 優れたコスト効率

AWSには、クラウド設計・運用のベストプラクティス集である「AWS Well-Architected フレームワーク」というものがあります。
AWS Well-Architected フレームワークは、AWS上でシステムを構築する際の決定における利点と欠点を理解するのに役立ちます。
フレームワークを利用して、信頼性が高く、セキュアで、効率的で、コスト効果の高いシステムをクラウド上に設計し運用する
ためのアーキテクチャのベストプラクティスを学ぶことができます。この中でも出てくるぐらいコスト最適化は重要な問題です。
@<br>{}

AWS Well-Architected フレームワークは、以下よりダウンロードできます。

@<href>{https://aws.amazon.com/jp/whitepapers/, https://aws.amazon.com/jp/whitepapers/}


=== EC2のコスト効率を考える

EC2のインスタンスの支払い方法は4つあります。

 * オンデマンド
 * リザーブドインスタンス
 * スポットインスタンス
 * Dedicated Hosts

これらの特徴を理解して、コスト効率を考えることが大事です。

==== オンデマンド

通常、何も考えずに作成するとオンデマンドになります。
オンデマンドの利用が向いているのは、開発環境としてサーバーを建てる場合、一定期間必要なサーバーや一時的なトラフィック増化対応で増設するサーバーなど
@<br>{}

【 特徴 】
オンデマンドが標準

==== リザーブドインスタンス

リザーブドインスタンスとは、あらかじめ1年か3年の利用を予約する事で、その分料金の割引が受けられる課金方式です。
オンデマンドに比べて料金が大幅に (最大75%) 割引になります。
リザーブドインスタンスの利用が向いているのは、起動したり停止したりせず、常に動いているサーバーなどです。
ずっと動かすなら安いほうがいい！後は、割引率を確認してどれだけ稼働しているかで判断する。
@<br>{}

【 特徴 】
1年か3年の契約期間の縛りがある。

==== スポットインスタンス

スポットインスタンスは、オンデマンド価格より低価で利用できる未使用のEC2インスタンスです。未使用のEC2インスタンスを静止状態割引でリクエストできるため、EC2のコストを大幅に削減できます｡
スポットインスタンスは、利用のしどころが難しいです。基本的には、オンデマンドの価格の30%ぐらいの価格で利用できるのですが、値段が上がった時にはどこまでも高くなってしまいます。
自分で上限価格を設定した場合には、上限価格よりも高くなった場合には強制的にインスタンスが削除されてしまいます。というわけで、インスタンスが削除されて処理が中断した場合でもリカバリーできるシステムになっているのなら利用する価値があるかと思います。
@<br>{}

【 特徴 】
利用するインスタンスの利用価格が変動している。自分が設定した価格よりも利用価格が上回ると強制的にインスタンスが削除されます。

==== Dedicated Hosts

Dedicated Hostは、EC2インスタンス容量を完全に自分専用として利用できる物理サーバーです。
Dedicated Hostsの利用が向いているのは、企業のコンプライアンスが厳しい場合などです。
@<br>{}

【 特徴 】
専用の物理サーバーで実行される。そのため企業コンプライアンスおよび規制要件を満たす設定を使用してインスタンスをデプロイできる。

=== S3のコスト効率を考える

S3には、6つのストレージクラスがあります。

 * S3 標準
 * S3 Intelligent-Tiering
 * S3 標準 – 低頻度アクセス
 * S3 1ゾーン
 * S3 Glacier
 * S3 Glacier Deep Archive

パフォーマンスを下げずにコストを節約するには、対応するさまざまなアクセスレベルをサポートするS3ストレージクラスを選ぶ必要があります。

==== S3 標準

通常、何も考えずに作成するとS3標準になります。
S3 標準は、よくアクセスされるデータ向けに設計されています。
アクセス頻度が低いファイルは、別クラスのストレージに保存する方が効率が良くなります。
@<br>{}

【 特徴 】

 * 低レイテンシーかつ高スループットなパフォーマンス
 * 複数のAZにわたってオブジェクトに耐久性99.999999999%を達成するよう設計
 * AZ全体に影響を及ぼすイベントに対する柔軟性
 * 1年で可用性が99.99%になるように設計
 * Amazon S3サービスレベルアグリーメント (SLA) で可用性が保証されています。
 * 転送中のデータのSSLと保管中のデータの暗号化をサポート
 * 他のS3ストレージクラスにオブジェクトを自動移行するためのライフサイクル管理  

==== S3 Intelligent-Tiering

S3 Intelligent-Tieringは、データへのアクセスパターンが予測できない。または変化するデータ向けといえます。
このストレージクラスには、高頻度と低頻度という2つのアクセス階層が組み込まれています。
両方の階層とも、S3 標準と同等の低レイテンシーを提供します。
モニタリングと自動化の料金を抑えつつ、アクセスパターンをモニタし、連続30日間アクセスされていないデータを低頻度のアクセス階層に移動します。
もしそのデータがのちにアクセスされた場合は、高頻度アクセス階層に自動的に戻されます。
データがあまりアクセスされないとほぼ確信している場合には、コスト節約の観点では、S3 標準 – 低頻度アクセスの利用が引き続き有益な選択となります。
@<br>{}

【特徴】

 * S3 標準と同じ低レイテンシーかつ高スループットなパフォーマンス
 * わずかな月額料金でモニタリングと自動階層化が可能
 * アクセスパターンの変化に応じて、オブジェクトを2つのアクセス階層間で自動的に移動する
 * 複数のAZにわたってオブジェクトに耐久性99.999999999%を達成するよう設計
 * AZ全体に影響を及ぼすイベントに対する柔軟性
 * 1年で可用性が99.9%になるように設計
 * Amazon S3サービスレベルアグリーメント (SLA) で可用性が保証されています。
 * 転送中のデータのSSLと保管中のデータの暗号化をサポート
 * 他のS3ストレージクラスにオブジェクトを自動移行するためのライフサイクル管理

==== S3 標準 – 低頻度アクセス

S3 標準 – 低頻度アクセスは、長期保管で、あまりアクセスされないデータ向けに設計されています。
@<br>{}

【特徴】

 * S3 標準と同じ低レイテンシーかつ高スループットなパフォーマンス
 * 複数のAZにわたってオブジェクトに耐久性99.999999999%を達成するよう設計
 * AZ全体に影響を及ぼすイベントに対する柔軟性
 * AZひとつが全部失われてもデータは回復性を維持
 * 1年で可用性が99.9%になるように設計
 * Amazon S3サービスレベルアグリーメント (SLA) で可用性が保証されています。
 * 転送中のデータのSSLと保管中のデータの暗号化をサポート
 * 他のS3ストレージクラスにオブジェクトを自動移行するためのライフサイクル管理

==== S3 1ゾーン

S3 1ゾーンは、長期保管で、あまりアクセスされず、クリティカルではないデータ向けに設計されています。
S3 1ゾーンの利用が向いているのは、オンプレミスデータのセカンダリーバックアップの保存、他のAWSリージョンからの複製先ストレージとしての利用など
@<br>{}

【 特徴 】

 * S3 標準と同じ低レイテンシーかつ高スループットなパフォーマンス
 * ひとつのAZのオブジェクトで耐久性99.999999999%が得られるように設計
 * 1年で可用性が99.5%になるように設計
 * Amazon S3サービスレベルアグリーメント (SLA) で可用性が保証されています。
 * 転送中のデータのSSLと保管中のデータの暗号化をサポート
 * 他のS3ストレージクラスにオブジェクトを自動移行するためのライフサイクル管理

【 注意事項 】

 S3 1ゾーンは、ひとつのAZに保存しますので、このストレージクラスに保存されたデータはAZが破壊されると失われます。

==== S3 Glacier

S3 Glacierは、長期保管で、あまりアクセスされず、アーカイブするクリティカルなデータ向けに設計されています。
@<br>{}

【 特徴 】

 * 複数のAZにわたってオブジェクトに耐久性99.999999999%を達成するよう設計
 * AZひとつが全部失われてもデータは回復性を維持
 * 転送中のデータのSSLと保管中のデータの暗号化をサポート
 * 低コストな設計で長期アーカイブに最適
 * 取得時間を設定可能（数分～数時間）
 * S3 Glacierに直接アップロードする「S3 PUT API」とオブジェクトを自動移行するためのS3ライフサイクル管理

==== S3 Glacier Deep Archive

S3 Glacier Deep Archiveは、長期保管で、あまりアクセスされず、アーカイブするクリティカルなデータ向けに設計されています。
金融サービス、ヘルスケア、パブリックセクターなどの規制が厳しい業界を対象としており、コンプライアンス要件を満たすために7～10年以上データセットを保管するように設計されています。
@<br>{}

【 特徴 】

 * 複数のAZにわたってオブジェクトに耐久性99.999999999%を達成するよう設計
 * 7〜10年間保持されるデータの長期保存用に設計された低コストのストレージクラス
 * 磁気テープライブラリの理想的な代替策
 * 取り出し時間は12時間以内
 * オブジェクトの自動移行のためのS3ライフサイクル管理

====[column] 優れたコスト効率を実現するための考え方

 * 過度なコンピューティング能力を使用しない。
 * リザーブドインスタンスを使用
 * Amazon Glacierを使用
 * 自前のキューシステムは作成せずSQSを使用

====[/column]

//embed[latex]{
\clearpage
//}

== 耐障害性

耐障害性とは、「システム内のどこかで障害が発生しても、システムはパフォーマンスを低下させることなく機能し続けることができる。」ことをいいます。
可用性では停止期間を短くすることを目指すのに対して、耐障害性ではパフォーマンスが悪くならないようにサービスが停止しない事を目指します。
可用性と耐障害性では考え方が違いますので、違いを把握しておきます。
@<br>{}

====[column] 問題

SLAを満たす為には4つのEC2インスタンスが必要なサービスで、AZで障害があった場合を考えてみます。

====[/column]


//embed[latex]{
\clearpage
//}

=== 高可用性構成

可用性の説明に出てきた高可用性構成で考えます。

//image[two-az-two-ec2][2つのAZに2つずつEC2を起動]{
//}

 * 2つのAZに2つずつEC2インスタンスを起動する
 * AZ-aで障害が発生した場合、残るのはAZ-bで起動している2つのEC2インスタンス
 * 残ったAZ-bに新たに2つのインスタンスが起動するまでSLAは満たせない
 * コストは、通常運用時は4インスタン分のコストがかかる

//embed[latex]{
\clearpage
//}

=== 耐障害性構成

耐障害性構成で考えてみる

//image[two-az-four-ec2][2つのAZに4つずつEC2を起動]{
//}

 * 2つのAZに4つずつEC2インスタンスを起動する
 * AZ-aで障害が発生した場合、残るのはAZ-bで起動している4つのEC2インスタンス
 * 残ったAZ-bに4つのインスタンスが起動しているのでSLAは満たせる
 * コストは、通常運用時でも8インスタン分のコストがかかる

//embed[latex]{
\clearpage
//}

=== 耐障害性構成2

別の耐障害性構成で考えてみる

//image[three-az-two-ec2][3つのAZに2つずつEC2を起動][scale=0.75]{
//}

 * 3つのAZに2つずつEC2インスタンスを起動する
 * AZ-aで障害が発生した場合、残るのはAZ-bで起動している2つのEC2インスタンスとAZ-cで起動している2つのEC2インスタンス
 * 残ったAZ-bとAZ-cに合計4つのインスタンスが起動しているのでSLAは満たせる
 * コストは、通常運用時でも6インスタン分のコストがかかる
 * AZを3つまたぐので設計的には複雑さが増す。

=== 耐障害性を実現するAWSサービス

AWSには、サービス自体が耐障害性を備えているものがある

 * Amazon DynamoDB
 * Amazon Route53


====[column] 耐障害性を実現するための考え方

 * 可用性の高いAPIを利用して、十分なキャパシティーを備える。システム内で障害が発生してもSLAを満たせるだけのコンピューティング能力を保持しておく。
 * 通常、耐障害性を確保するには、追加のコンピューティング能力が必要となりコストがかかる。
 * 耐障害性を備えたシステムは高可用性を備えたシステムでもある。

====[/column]

//embed[latex]{
\clearpage
//}

== スケーラブルな分散システム

スケーラブルな分散システムでは、サービスの規模に合わせて柔軟にシステムを拡張できる拡張性のある設計をします。
先ほど出てきた可用性のあるシステム構成をスケーラブルな構成に変更していきます。

//image[scalable1][可用性のある構成]{
//}

実はこのMulti-AZ構成にしても、EC2の設定や起動、ELBへの追加は自分で行わないといけません。
トラフィックが増えるたら自分でEC2を増やしてELBに追加。トラフィックが減ったらELBから外してEC2を削除。とても大変そうです。
また、急なトラフィックの増加には間に合いそうにありません。そこで、Auto Scalingを設定して負荷状況に応じて自動的ンEC2を増減できるような構成に変更します。

//image[scalable2][Auto Scalingを設定した]{
//}

AutoScalingを設定してCloudWatchで監視をし負荷状況に応じて自動的にEC2を増減できるようにしました。
また、ELBを介すことで、バックエンドのEC2の動的な増減はエンドユーザーには影響しません。
システムの負荷に応じてEC2の適切な数が保たれるのでコスト効率が良くなります。

//embed[latex]{
\clearpage
//}

次は、EC2について考えてみます。トラフィックの増減によりEC2が増減できるようになりましたが、EC2の設定はどうしたらいいでしょうか？
この構成だと、あらかじめAMIを作成しておき、それを元にEC2を作成していく事になります。しかしAMIに入れておけない設定などがある場合には困ってしまいます。
そんな時に利用するのが、EC2のユーザーデータです。ユーザーデータとはEC2を起動後に実行するコマンドを指定できる項目の事です。
設定ファイルやアプリケーションをS3のバケットに置いておき、EC2の起動時にデプロイする処理をユーザーデータに設定しておけば、
動的にインスタンスが増えた際に、自動的に設定ファイルの読み込みやアプロケーションのデプロイを行ってくれます。

//image[scalable3][EC2の起動時にユーザーデータを利用する]{
//}

//embed[latex]{
\clearpage
//}

最後にアプリケーションのステート情報が気になります。
このままだとステート情報は各EC2に保存されてしまいます。ELBが同じEC2にトラフィックを流してくれるとは限りません。
もし違うEC2にトラフィックを流されると、そのEC2にはステート情報がないため、処理が正常に動いてくれなくなります。
これを回避するためには、各EC2ではステート情報を持たずにステート情報を外部で持ち、EC2はそこへアクセスすることによりステート情報を引き出すように変更すれば良いです。
今回は、ステート情報をAWS DynamoDBに保存するように構成を変更します。

//image[scalable4][ステート情報をAWS DynamoDBに保存]{
//}

これで、EC2はステートレスになり、動的にEC2が増減してもAWS DynamoDB上のステート情報にアクセスすることができるようになりました。

//embed[latex]{
\clearpage
//}

====[column] スケーラブルな分散システムを実現するための考え方

 * コンポーネントが常に正常動作し、利用可能で、同じ場所にあるといった想定にしない
 ** Auto Scaling
 ** Elastic IP
 ** 各種エンドポイントを利用する
 * 自在に再起動できる設計を使用
 ** インスタンス内状態を持つのではなく他で持つように（ステートフルではなくステートレス）
 ** ELBとCloudwatchを利用して、インスタンスの健全性を調べる
 * インスタンスをブートストラップする
 ** 起動時にユーザーデータを設定し、自動的に設定処理を実行する
 * 上記のように融通の利く設計にすると、多くの場合でコスト削減につながる

====[/column]

//embed[latex]{
\clearpage
//}

== まとめ

=== 可用性

 * システム内のどこかで障害が発生しても、システムは可能な限り機能し続ける。また、障害の時間を短くするようにする。
 * 高い可用性を実現するAWSサービス（ELBなど）を把握する。

=== 優れたコスト効率

 * 過度なコンピューティング能力を使用しない。AWSのリソースはいつでも増減可能
 * もっとも低コストなアーキテクチャを選定する。（リザーブドインスタンスを使用する、Amazon Glacierを使用する、自前のキューシステムは作成せずSQSを使用する。など）

=== 耐障害性

 * システム内のどこかで障害が発生しても、システムはパフォーマンスを低下させることなく機能し続けることができる。
 * 「高可用性」と「耐障害性」の違いを把握し、それぞれの特徴をアーキテクチャに組み込む方法を理解する。
 * 耐障害性を提供するAWSサービス（Amazon Dynamo、AWS Route53 など）を把握する。

=== スケーラブルな分散システム

 * 自動的にスケーリングするAWSサービス（SQS など）を把握する。
 * Auto Scalingの仕組みと使用するべき場合を把握する。

//embed[latex]{
\clearpage
//}

//indepimage[v-peace][][scale=0.90]